import logging
import sys
import time
from nacl.encoding import HexEncoder
from nacl.signing import SigningKey
import log_messages
from commons import Commons
import random
from random_tasks import random_tasks
import traceback
import uuid
import random
import os

o_client = import_da('client')
o_replica = import_da('replica')

start_time = time.time()

PRE_PROCESS_APPLICATION_FAILURES = ['crash', 'sleep', 'drop', 'increment_slot', 'extra_op']

# noinspection PyMethodParameters
class Olympus(process):
    def setup(process_id, file_path):
        self._id = "o1"
        self._process_id = process_id
        self._config = {'clients': {}, 'replicas': {}, 'failures': {}}
        self._replicas = []
        self.file_path = file_path
        self._timeout = 3
        self._reconfig_id = None

        self._wedged_responses = {}
        self._wedged_quorum = {}
        self._wedged_slot_operation_pairs = {}

        self._latest_result_stmt_result_pairs = {}
        self._num_caught_up_messages = 0
        self._reconfig_in_progress = False
        self._running_state_requested_replica_id = None
        self._expected_running_state_hash = None
        self._valid_running_state_received = False

        self._current_config = -1
        self._done_messages = []
        self._aborted_messages = {}

        self.initialize()

    def parse_config():
        with open(self.file_path, 'r') as f:
            for line in f:
                if line[0] != '#':
                    (key, sep, val) = line.partition('=')
                    # if the line does not contain '=', it is invalid and hence ignored
                    if len(sep) != 0:
                        val = val.strip()
                        self.save_config_line(key.strip(), int(val) if str.isdecimal(val) else val)
        output(log_messages.PARSED_CONFIG, self._config)

    def save_config_line(key, val):
        if key == 'hosts':
            hosts = {}
            id = 0
            for host in val.split("; "):
                hosts[id] = host
                id += 1
            self._config[key] = hosts
        elif key == 'client_hosts':
            client_hosts = {}
            id_num = 0
            hosts = self._config['hosts']
            for client_host_id in val.split(";"):
                client_host_id = client_host_id.strip()
                if client_host_id == '':
                    break
                client_hosts['c' + str(id_num)] = hosts[int(client_host_id)]
                id_num += 1
            self._config[key] = client_hosts
        elif key == 'replica_hosts':
            replica_hosts = {}
            id_num = 0
            hosts = self._config['hosts']
            for replica_host in val.split("; "):
                replica_hosts['r' + str(id_num)] = replica_host
                id_num += 1
            self._config[key] = replica_hosts
        elif "workload[" in key:
            workloads = self._config['workloads'] if 'workloads' in self._config else {}
            client_id = "c" + key[-2:-1]
            if (val.startswith('pseudorandom')):
                seed_start_index = val.index('(') + 1
                seed_end_index = val.index(')')
                seed_n_pair = val[seed_start_index:seed_end_index]
                seed_n_pair = seed_n_pair.split(',')
                seed, n = int(seed_n_pair[0].strip()), int(seed_n_pair[1].strip())

                random.seed(seed)
                workloads[client_id] = [random.choice(random_tasks) for i in range(n)]
            else:
                workloads[client_id] = val.split("; ")

            self._config['workloads'] = workloads
        elif "failures[" in key:
            failures = self._config['failures'] if 'failures' in self._config else {}
            config_replica = key[9:-1]
            config_num = int(config_replica.strip().split(",")[0])
            replica_id = 'r' + config_replica.strip().split(",")[1]
            config_failure = failures[config_num] if config_num in failures else {}
            config_failure[replica_id] = {}
            if len(val.split("; ")) > 0:
                config_failure[replica_id] = self._parse_failure_triggers(val.split(";"))
            failures[config_num] = config_failure
            self._config['failures'] = failures
        else:
            self._config[key] = val

    def _parse_failure_triggers(failure_triggers):
        parsed_failure_triggers = {}
        for failure_trigger in failure_triggers:
            failure_trigger = failure_trigger.strip()
            if failure_trigger == '':
                continue
            trigger = failure_trigger.split("),")[0].strip()
            trigger_type = trigger.split("(")[0].strip()
            client_id = None
            trigger_str_split = trigger.split("(")[1].split(",")
            trigger_num = -1
            if len(trigger_str_split) == 1:
                trigger_num = int(trigger_str_split[0].strip())
            elif len(trigger_str_split) == 2:
                client_id = 'c' + trigger_str_split[0].strip()
                trigger_num = int(trigger_str_split[1].strip())
            failure = failure_trigger.split("),")[1].strip()
            failure_type = failure.split("(")[0].strip()
            failure_arg = failure.split("(")[1].strip()[:-1]

            parsed_failures_for_trigger = parsed_failure_triggers[trigger_type] if trigger_type in parsed_failure_triggers else []
            parsed_failure_trigger = {
                'failure': (failure_type, failure_arg), 'trigger_point': {
                    'event_num': trigger_num,
                    'application': 'pre' if failure_type in PRE_PROCESS_APPLICATION_FAILURES else 'post',
                    'client_id': client_id
                }
            }
            parsed_failures_for_trigger.append(parsed_failure_trigger)
            parsed_failure_triggers[trigger_type] = parsed_failures_for_trigger

        return parsed_failure_triggers

    def generate_keys():
        self._config['keys'] = {}
        self._config['keys']['private_keys'] = {}
        self._config['keys']['public_keys'] = {}
        # Generate keys for Olympus
        self.set_keys(self._id, SigningKey.generate())
        # Generate keys for Clients
        for client_id in self._config['client_hosts'].keys():
            self.set_keys(client_id, SigningKey.generate())
        # Generate keys for Replicas
        self.generate_keys_for_replicas()

        output(log_messages.GENERATED_KEYS, self._config['keys'])

    def generate_keys_for_replicas():
        for replica_id in self._config['replica_hosts'].keys():
            self.set_keys(replica_id, SigningKey.generate())

    def set_keys(id, private_key):
        self._config['keys']['private_keys'][id] = private_key.encode(encoder=HexEncoder)
        self._config['keys']['public_keys'][id] = private_key.verify_key.encode(encoder=HexEncoder)

    def init_clients():
        for id_num in range(self._config['num_client']):
            client_id = 'c' + str(id_num)
            client_config = get_client_config(client_id)
            client = self._config['clients'][client_id]
            setup(client, args=(client_config,))
            start(client)

    def get_client_config(client_id):
        client_config = {
            'id': client_id,
            'workload': self._config['workloads'][client_id],
            'private_key': self._config['keys']['private_keys'][client_id],
            'public_keys': self._config['keys']['public_keys'],
            'client_timeout': self._config['client_timeout'] / 1000,
            'olympus': {'id': self._id, 'process_id': self._process_id},
            'replicas': self._config['replicas'],
            'head_id': self._config['head_id'],
            't': self._config['t']
        }
        return client_config

    def init_hist(running_state=None):
        self._current_config += 1
        output('Initializing cluster with configuration version: ', self._current_config)

        self._replicas = []
        prev_replica = None
        preceding_replica_ids = []
        self._config['replicas'] = {}
        self._config['replicas'] = {'r' + str(id_num): new(o_replica.Replica)
                                    for id_num in range(0, len(self._config['replica_hosts']))}
        for id_num in range(0, len(self._config['replica_hosts'])):
            replica_id = 'r' + str(id_num)
            replica = self._config['replicas'][replica_id]
            replica_config = {
                'id': replica_id,
                'clients': self._config['clients'],
                'private_key': self._config['keys']['private_keys'][replica_id],
                'public_keys': self._config['keys']['public_keys'],
                'timeout': self._config['nonhead_timeout'] / 1000,
                'prev_replica_ids': preceding_replica_ids,
                'type': 'replica',
                'current_config': self._current_config,
                'prev_replica': prev_replica,
                'checkpt_interval': self._config['checkpt_interval'],
                'replicas': self._config['replicas'],
                'olympus': {'id': self._id, 'process_id': self._process_id},
                't': self._config['t']
            }
            next_replica_id = 'r' + str(id_num + 1)
            replica_config['next_replica'] = self._config['replicas'][next_replica_id] \
                if next_replica_id in self._config['replicas'].keys() else None
            replica_config['failures'] = []
            if self._current_config in self._config['failures']:
                if replica_id in self._config['failures'][self._current_config]:
                    replica_config['failures'] = self._config['failures'][self._current_config][replica_id]

            if id_num == 0:
                replica_config['type'] = 'head'
                replica_config['timeout'] = self._config['head_timeout'] / 1000
                self._config['head_id'] = replica_id
            elif id_num == len(self._config['replica_hosts']) - 1:
                replica_config['type'] = 'tail'
                self._config['tail_id'] = replica_id

            prev_replica = replica
            id_num += 1

            aborted_message = self._aborted_messages.get(replica_id)
            event_counts = None
            if aborted_message is None:
                event_counts = None
            else:
                event_counts = aborted_message['content']['event_counts']

            setup(replica, args=(replica_config, running_state, event_counts))
            start(replica)
            self._replicas.append(replica_id)
            preceding_replica_ids.append(replica_id)

            self._reconfig_in_progress = False

    def receive(msg=('reconfig_request', message, sender_id), from_=self._config['replicas'].values()):
        if self._reconfig_in_progress:
            output('Reconfiguration in progress, ignoring reconfig request from:', sender_id)
            return

        if not Commons.is_valid_signature(message['content'], message['signed_content'],
                                          self._config['keys']['public_keys'][sender_id]):
            output(log_messages.INVALID_SIGNATURE, sender_id, level=logging.ERROR)
            return

        output("Received reconfig request from: ", sender_id)

        if not message['content'].get('result_shuttle_timeout', False) \
                and not self._is_valid_misbehavior_proof(message['content'].get('misbehavior_proof', None), sender_id):
            output('Received invalid reconfiguration request from: ', sender_id)
            return

        output('Received valid reconfiguration request from: ', sender_id)
        self._send_wedge_requests_and_wait()

    def receive(msg=('wedged', message, replica_id), from_=self._config['replicas'].values()):
        output('Received wedged message from replica:', replica_id)
        if not Commons.is_valid_signature(message['content'], message['signed_content'],
                                          self._config['keys']['public_keys'][replica_id]):
            output(log_messages.INVALID_SIGNATURE, replica_id, level=logging.ERROR)
            return

        if message['content']['reconfig_id'] != self._reconfig_id:
            output("Wedged message received for stale reconfiguration attempt: ",
                   message['content']['reconfig_id'], " from: ", replica_id, ". Ignoring....")
            return

        if 'checkpoint_proof' in message['content'] and message['content']['checkpoint_proof'] is not None:
            validation_output = Commons.is_valid_checkpoint_proof(message["content"]["checkpoint_proof"],
                                                                  self._config['replicas'],
                                                                  self._config['keys']['public_keys'], self._id)
            if not validation_output[0]:
                output(validation_output[1])
                output('Received invalid checkpoint proof: ', message["content"]["checkpoint_proof"], " from=",
                       replica_id)
                return

        prev_slot = -1
        for order_proof in message["content"]["history"]:
            if prev_slot != -1 and prev_slot + 1 != order_proof['slot']:
                output('Received history with holes: ', message["content"]["history"], " from=", replica_id)
                return
            prev_slot = order_proof['slot']
            replica_ids = []
            for index in range(0, self._replicas.index(replica_id)):
                replica_ids.append(self._replicas[index])
            validation_output = Commons.is_valid_order_proof(order_proof, replica_ids,
                                                             self._config['keys']['public_keys'], self._id)

            if order_proof['slot'] not in self._wedged_slot_operation_pairs:
                self._wedged_slot_operation_pairs[order_proof['slot']] = order_proof['operation']
            elif not order_proof['operation'] ==\
                    self._wedged_slot_operation_pairs[order_proof['slot']]:
                output('Order proof slot and operation mismatch across wedged statements: (slot, operation) = ',
                       order_proof['slot'], order_proof['operation'])
                output('Restarting quorum selection..')
                self._send_wedge_requests_and_wait()
                return

            if not validation_output[0]:
                output(validation_output[1])
                output('Received invalid order proof: ', order_proof, " from=", replica_id)
                return

        if len(self._wedged_quorum) < self._config['t'] + 1:
            output('Adding the following replica to the quorum:', replica_id)
            self._wedged_quorum[replica_id] = message
        else:
            output('Adding wedged response to wedged_responses:', replica_id)
            self._wedged_responses[replica_id] = message

        output('Validated history successfully for wedged message from: ', replica_id)

    def receive(msg=('caught_up', caught_up_message, replica_id), from_=self._config['replicas'].values()):
        output('Received caught up message from replica:', replica_id)
        if not Commons.is_valid_signature(caught_up_message['content'], caught_up_message['signed_content'],
                                          self._config['keys']['public_keys'][replica_id]):
            output(log_messages.INVALID_SIGNATURE, replica_id, level=logging.ERROR)
            return

        if not caught_up_message['content']['reconfig_id'] == self._reconfig_id:
            output("Caught up message received for stale reconfiguration attempt: ",
                   caught_up_message['content']['reconfig_id'], " from: ", replica_id, ". Ignoring....")

        if not replica_id in self._wedged_quorum:
            return

        if self._expected_running_state_hash is None:
            self._expected_running_state_hash = \
                caught_up_message['content']['running_state_hash']
            output("Updated the _expected_running_state_hash in Olympus: ", self._expected_running_state_hash,
                   ", on Value sent by replica: ", replica_id)
        elif caught_up_message['content']['running_state_hash'] != self._expected_running_state_hash:
            output('Invalid running state detected in caught up message with hash:',
                   caught_up_message['content']['running_state_hash'], ' from: ', replica_id,
                   ' ....Selecting another wedge quorum')
            self._handle_caught_up_quorum_unsatisfied()
            return

        for client_id, latest_result_stmt_result_pair in caught_up_message['content'][
                'latest_result_stmt_result_pairs'].items():
            if client_id in self._latest_result_stmt_result_pairs:
                if latest_result_stmt_result_pair != self._latest_result_stmt_result_pairs[client_id]:
                    output('Invalid result statement and result pair found in potentially'
                           ' unserved client requests for replica: ', client_id)
                    self._handle_caught_up_quorum_unsatisfied()
                    return

            else:
                self._latest_result_stmt_result_pairs[client_id] = latest_result_stmt_result_pair

        self._num_caught_up_messages += 1
        output("Added Replica to caught up quorum: ", replica_id)

    def _send_wedge_requests_and_wait():
        # housekeeping
        self._wedged_responses = {}
        self._wedged_quorum = {}
        self._wedged_slot_operation_pairs = {}
        self._running_state_requested_replica_id = None
        self._latest_result_stmt_result_pairs = {}
        self._expected_running_state_hash = None

        self._num_caught_up_messages = 0
        self._reconfig_in_progress = True
        self._reconfig_id = uuid.uuid4().hex

        for replica in self._config['replicas'].items():
            wedge_request_message = {
                'content': {
                    'reconfig_id': self._reconfig_id
                }
            }
            wedge_request_message['signed_content'] = Commons.sign(wedge_request_message['content'],
                                                                   self._config['keys']['private_keys'][self._id])

            send(('wedge', wedge_request_message), to=replica[1])
            output("Sent wedge request to: ", replica[0])

        if await(len(self._wedged_quorum) >= (self._config['t'] + 1)):
            self._handle_wedged_quorum_satisfied()
        elif timeout(self._timeout):
            output('Wait for a wedged quorum timed out...Restarting quorum selection..')
            self._send_wedge_requests_and_wait()

    def initialize():
        self.parse_config()
        self.generate_keys()
        self.create_clients()
        self.init_hist()
        self.init_clients()

    def _reconfigure_cluster(running_state):
        output('Reconfiguration started')
        self._terminate_replicas()

        if await(len(self._aborted_messages) == len(self._replicas)):
            output('Received all aborted messages')
            pass
        elif timeout(self._timeout):
            output('Wait for aborted messages from all replicas timed out.')
            pass

        self.generate_keys_for_replicas()
        self.init_hist(running_state)

    def _terminate_replicas():
        output('Terminating replicas..')
        for replica in self._config['replicas'].items():
            message = {
                'content': {
                    'terminate': True
                }
            }
            message['signed_content'] = Commons.sign(message['content'],
                                                     self._config['keys']['private_keys'][self._id])
            send(('abort', message), to=replica[1])
            output('Sent abort command to replica :', replica[0])

    def run():
        await(len(self._done_messages) == len(self._config['clients']) and not self._reconfig_in_progress)
        self._terminate_replicas()

        output('Olympus terminating')
        end_time = time.time()
        output("elapsed time (seconds): ", end_time - start_time, level=logging.CRITICAL)

    # On receipt of a config_request from a client
    def receive(msg=('config_request', message, client_id), from_=self._config['clients'].values()):
        output(log_messages.CONFIG_REQUEST_RECEIVED, client_id)
        if not Commons.is_valid_signature(message['content'], message['signed_content'],
                                          self._config['keys']['public_keys'][client_id]):
            output(log_messages.INVALID_SIGNATURE, client_id, level=logging.ERROR)
            return

        config_message = {
            'content': get_client_config(client_id)
        }
        config_message['signed_content'] = Commons.sign(config_message['content'],
                                                        self._config['keys']['private_keys'][self._id])
        send(('config', config_message), to=self._config['clients'][client_id])

        output(log_messages.CONFIG_SENT, client_id)

    def receive(msg=('running_state', running_state_message),
                from_=self._config['replicas'][self._running_state_requested_replica_id]):
        output('Running state received from: ', self._running_state_requested_replica_id)
        if not Commons.is_valid_signature(running_state_message['content'], running_state_message['signed_content'],
                                          self._config['keys']['public_keys'][
                                              self._running_state_requested_replica_id]):
            output(log_messages.INVALID_SIGNATURE, self._running_state_requested_replica_id, level=logging.ERROR)
            return

        running_state_hash = Commons.hash(sorted(running_state_message['content']['running_state'].items()))
        if running_state_hash != self._expected_running_state_hash:
            self._valid_running_state_received = False
            output('Received inconsistent running state from: ', self._running_state_requested_replica_id)
            return

        output('Valid running state received in: ', self._running_state_requested_replica_id)
        self._valid_running_state_received = True
        self._reconfigure_cluster(running_state_message['content']['running_state'])

    def receive(msg=('done', message, client_id), from_=self._config['clients'].values()):
        output('Done message received from client: ', client_id)
        if not Commons.is_valid_signature(message['content'], message['signed_content'],
                                          self._config['keys']['public_keys'][client_id]):
            output(log_messages.INVALID_SIGNATURE, client_id, level=logging.ERROR)
            return

        self._done_messages.append(message)

    def receive(msg=('aborted', aborted_message, replica_id), from_=self._config['replicas'].values()):
        output('Aborted message received from replica: ', replica_id)
        if not Commons.is_valid_signature(aborted_message['content'], aborted_message['signed_content'],
                                          self._config['keys']['public_keys'][replica_id]):
            output(log_messages.INVALID_SIGNATURE, replica_id, level=logging.ERROR)
            return

        self._aborted_messages[replica_id] = aborted_message

    def create_clients():
        for id_num in range(self._config['num_client']):
            self._config['clients']['c' + str(id_num)] = new(o_client.Client)

    def _is_valid_misbehavior_proof(misbehavior_proof, reported_by_id):
        if misbehavior_proof is None:
            return False
        if 'order_proof' in misbehavior_proof:
            replica_ids = []
            for index in range(0, self._replicas.index(reported_by_id)):
                replica_ids.append(self._replicas[index])
            return not Commons.is_valid_order_proof(misbehavior_proof['order_proof'], replica_ids,
                                                    self._config['keys']['public_keys'], self._id)[0]
        elif 'result_proof' in misbehavior_proof:
            return not Commons.is_valid_result_proof(misbehavior_proof['result_proof'], self._config['replicas'],
                                                     self._config['keys']['public_keys'], self._id)[0]

        elif 'invalid_client_request_shuttle' in misbehavior_proof:
            return not Commons.is_valid_shuttle_header(misbehavior_proof['invalid_client_request_shuttle'],
                                                       self._config['keys']['public_keys'],
                                                       self._config['clients'], self._id)[0]
        elif 'checkpoint_proof' in misbehavior_proof:
            return not Commons.is_valid_checkpoint_proof(misbehavior_proof['checkpoint_proof'],
                                                         self._config['replicas'], self._config['keys']['public_keys'],
                                                         self._id)[0]

        return False

    def _handle_wedged_quorum_satisfied():
        output("Wedged quorum is satisfied, initiating catch-up process in Olympus.")

        longest_history = self._get_longest_history()

        for replica_id, wedged_message in self._wedged_quorum.items():
            max_operation_slot = self._get_max_operation_slot(wedged_message['content']['history'])
            delta_history = []

            for order_proof in longest_history:
                if order_proof['slot'] > max_operation_slot:
                    delta_history.append(order_proof)
            catch_up_message = {
                'content': {
                    'delta_history': delta_history,
                    'reconfig_id': self._reconfig_id
                }
            }

            catch_up_message['signed_content'] = Commons.sign(catch_up_message['content'],
                                                              self._config['keys']['private_keys'][self._id])

            output('Sending catch up message to replica: ', replica_id)
            send(('catch_up', catch_up_message), to=self._config['replicas'][replica_id])

        if await(self._num_caught_up_messages >= self._config['t'] + 1):
            self._handle_caught_up_quorum_satisfied()
        elif timeout(self._timeout):
            output('Wait for a caught up quorum timed out...Restarting quorum selection..')
            self._send_wedge_requests_and_wait()

    def _get_longest_history():
        max_operation_slot = -1
        longest_history = None
        updated_replica_id = None
        output("Finding Longest History from Wedged Messages.")
        for replica_id, wedged_message in self._wedged_quorum.items():
            max_operation_slot_for_replica = self._get_max_operation_slot(
                wedged_message['content']['history'])
            if max_operation_slot_for_replica > max_operation_slot:
                longest_history = wedged_message['content']['history']
                updated_replica_id = replica_id
                max_operation_slot = max_operation_slot_for_replica

        output("Longest History found in Replica: ", updated_replica_id)
        return longest_history

    def _get_max_operation_slot(history):
        max_operation_slot = -1
        for order_proof in history:
            if order_proof['slot'] >= max_operation_slot:
                max_operation_slot = order_proof['slot']
        return max_operation_slot

    def _handle_caught_up_quorum_satisfied():
        output('Caught up quorum is satisfied.')
        for replica_id, wedged_message in self._wedged_quorum.items():
            get_running_state_messsage = {
                'content': {
                    'get_running_state': True  # dummy entry used
                }
            }
            get_running_state_messsage['signed_content'] = Commons.sign(get_running_state_messsage['content'],
                                                                        self._config['keys']['private_keys'][self._id])

            self._running_state_requested_replica_id = replica_id

            output('Sending get_running_state message to: ', self._running_state_requested_replica_id)
            send(('get_running_state', get_running_state_messsage),
                 to=self._config['replicas'][self._running_state_requested_replica_id])

            self._valid_running_state_received = False
            if await(self._valid_running_state_received):
                self._valid_running_state_received = False
                self._running_state_requested_replica_id = None
                self._expected_running_state_hash = None
                break
            elif timeout(self._timeout):
                continue

        self._send_verified_results()

    def _send_verified_results():
        for client_id, result_stmt_pair in self._latest_result_stmt_result_pairs.items():
            output('Olympus sent verified, potentially undelivered result to client:', client_id)
            verified_result_message = {
                'content': {
                    'operation': result_stmt_pair['result_statement']['operation'],
                    'result': result_stmt_pair['result']
                }
            }

            verified_result_message['signed_content'] = Commons.sign(verified_result_message['content'],
                                                                     self._config['keys']['private_keys'][self._id])
            send(('verified_result', verified_result_message), to=self._config['clients'][client_id])

    def _handle_caught_up_quorum_unsatisfied():
        quorum_replica_ids = list(self._wedged_quorum.keys())
        random_quorum_replica_id = random.choice(quorum_replica_ids)
        wedged_responses_replica_ids = list(self._wedged_responses.keys())
        random_replica_id = random.choice(wedged_responses_replica_ids)

        self._wedged_responses[random_quorum_replica_id] = self._wedged_quorum[random_quorum_replica_id]
        del self._wedged_quorum[random_quorum_replica_id]

        self._wedged_quorum[random_replica_id] = self._wedged_responses[random_replica_id]
        del self._wedged_responses[random_replica_id]
        output('Chosen the following replica as a replacement in the quorum:', random_replica_id)
        self._handle_wedged_quorum_satisfied()


def main():
    config(channel={'reliable', 'fifo'})
    olympus = new(Olympus)
    setup(olympus, args=(olympus, sys.argv[1]))
    start(olympus)
