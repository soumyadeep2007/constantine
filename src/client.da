import logging

import log_messages
from commons import Commons
# noinspection PyUnresolvedReferences,PyMethodParameters

# todo : sign all client requests

class Client(process):
    def setup(client_config):
        self._id = client_config['id']
        self._workload = client_config['workload']
        self._client_timeout = client_config['client_timeout']
        self._pending_requests = {}
        self._olympus = client_config['olympus']
        self._private_key = client_config['private_key']
        self._public_keys = client_config['public_keys']
        self._replicas = client_config['replicas']
        self._head_id = client_config['head_id']
        self._t = client_config['t']

        self._config_received = False
        self._operation_id_counter = 0
        self._valid_result_received = False

        self._object = {}

        self._shared_object_received = False

        output(self._id, ' initialized with config=', client_config)

    def run():
        for task in self._workload:
            operation = self._create_operation(task)

            output("return_value=", Commons.perform_operation(operation['command_string'], self._object))

            self._issue_request(operation)

        output("~~~~~~~~~~Final state:", self._object)
        self._request_shared_object()

        output('Workload finished for client: ', self._id)

        done_message = {
            'content': {
                'client_id': self._id  # dummy field
            }
        }
        output('Sending done message to Olympus and terminating')
        done_message['signed_content'] = Commons.sign(done_message['content'], self._private_key)
        send(('done', done_message, self._id), to=self._olympus['process_id'])

    def _request_config():
        output(log_messages.REQUESTING_CONFIG, self._id)
        config_request_message = _create_config_request_message()
        self._config_received = False
        send(('config_request', config_request_message, self._id), to=self._olympus['process_id'])

        if await(self._config_received):
            pass
        elif timeout(self._client_timeout):
            output(log_messages.CONFIG_REQUEST_TIMEOUT)
            self._request_config()

    def _request_shared_object():
        output("Requesting shared object from head:")
        self._shared_object_received = False
        send(('shared_object_request', self._id), to=self._replicas[self._head_id])
        if await(self._shared_object_received):
            pass

    def receive(msg=('shared_object', shared_object), from_=self._olympus['process_id']):
        output("Received shared object from head = ", shared_object)
        self._shared_object_received = True
        if self._is_final_result_consistent(self._object, shared_object):
            output('Final results are consistent')
        else:
            output('Final results are NOT consistent')

    def _is_final_result_consistent(client_object, shared_object):
        for client_object_key in client_object.keys():
            if client_object_key not in shared_object or client_object[client_object_key] != shared_object[
                        client_object_key]:
                return False

        return True

    def _create_config_request_message():
        config_request_message = {'content': {}}
        config_request_message['content']['client_id'] = self._id
        config_request_message['signed_content'] = Commons.sign(config_request_message['content'], self._private_key)
        return config_request_message

    def _create_operation(task):
        operation = {
            'id': self._operation_id_counter,
            'client_id': self._id,
            'command_string': task
        }
        output(log_messages.OPERATION_CREATED, operation)
        self._operation_id_counter += 1
        return operation

    def _issue_request(operation):
        self._valid_result_received = False

        request_message = self._create_request(operation, is_retry=False)
        pending_requests_key = (operation['id'], self._id)
        self._pending_requests[pending_requests_key] = request_message
        send(('request', request_message, self._id), to=self._replicas[self._head_id])
        output(log_messages.REQUEST_MADE, request_message)

        if await(self._valid_result_received):
            pass
        elif timeout(self._client_timeout):
            output(log_messages.REQUEST_TIMEOUT, operation)
            self._retry_request(request_message)

    def _create_request(operation, is_retry):
        request_message = {
            'content': {
                'is_retry': is_retry,
                'operation': dict(operation)
            }
        }
        request_message['signed_content'] = Commons.sign(request_message['content'], self._private_key)
        return request_message

    # On receipt of a config message from Olympus
    def receive(msg=('config', message), from_=self._olympus['process_id']):
        if not Commons.is_valid_signature(message['content'], message['signed_content'],
                                          self._public_keys[self._olympus['id']]):
            output(log_messages.INVALID_SIGNATURE, self._olympus['id'], level=logging.ERROR)
            return

        self._config_received = True
        client_config = message['content']
        self._id = client_config['id']
        self._client_timeout = client_config['client_timeout']
        self._olympus = client_config['olympus']
        self._private_key = client_config['private_key']
        self._public_keys = client_config['public_keys']
        self._replicas = client_config['replicas']
        self._head_id = client_config['head_id']
        self._t = client_config['t']
        self._config_received = True
        output(log_messages.CONFIG_FETCHED, message['content'])

    # On receipt of a result message from a replica
    def receive(msg=('result', message, replica_id), from_=self._replicas.values()):
        output(log_messages.RESULT_RECEIVED, replica_id)

        pending_requests_key = (message['content']['operation']['id'], message['content']['operation']['client_id'])
        if pending_requests_key not in self._pending_requests:
            output('Not a pending request', pending_requests_key)
            return

        if self.is_valid_result(message, self._replicas, self._public_keys):
            self._pending_requests.pop(pending_requests_key)
            self._process_result(message['content']['operation'], message['content']['result_proof']['result'])
            output(log_messages.VALID_RESULT_RECEIVED, message['content']['result_proof']['result'],
                   message['content']['operation'])
            self._valid_result_received = True
        else:
            output(log_messages.INVALID_RESULT_RECEIVED, message['content']['result_proof']['result'],
                   message['content']['operation'])
            self._retry_request(message)

    def receive(msg=('verified_result', message), from_=self._olympus['process_id']):
        output('Verified result message received from Olympus')

        if not Commons.is_valid_signature(message['content'], message['signed_content'],
                                          self._public_keys[self._olympus['id']]):
            output(log_messages.INVALID_SIGNATURE, self._olympus['id'], level=logging.ERROR)
            return

        pending_requests_key = (message['content']['operation']['id'], message['content']['operation']['client_id'])
        if pending_requests_key not in self._pending_requests:
            output('Not a pending request', pending_requests_key)
            return
        self._pending_requests.pop(pending_requests_key)

        self._process_result(message['content']['operation'], message['content']['result'])
        self._valid_result_received = True
        output(log_messages.VALID_RESULT_RECEIVED, message['content']['result'],
               message['content']['operation'])

    #  On receipt of an error message from a replica
    def receive(msg=('error', message, replica_id), from_=self._replicas.values()):
        output(log_messages.ERROR_MESSAGE_RECEIVED, replica_id)
        self._retry_request(message)

    def _process_result(operation, result):
        output(log_messages.OPERATION_RESULT_PAIR, operation, result)

    def _retry_request(message):
        self._request_config()

        message['content']['is_retry'] = True
        message['signed_content'] = Commons.sign(message['content'], self._private_key)
        output(log_messages.RETRANSMISSION, message['content']['operation'])
        for replica in self._replicas.values():
            send(('request', message, self._id), to=replica)

        if await(self._valid_result_received):
            pass
        elif timeout(self._client_timeout):
            output(log_messages.REQUEST_TIMEOUT, message['content']['operation'])
            self._retry_request(message)

    def is_valid_result(result_shuttle, replicas, public_keys):
        expected_hash = Commons.hash(result_shuttle["content"]["result_proof"]["result"])
        hash_match_count = 0
        for replica_id in replicas:
            replica_missing = replica_id not in result_shuttle['content']['result_proof']["result_statements"]
            if replica_missing:
                return False

            result_stmt = result_shuttle['content']['result_proof']['result_statements'][replica_id]
            if not Commons.is_valid_signature(result_stmt['result_statement'], result_stmt['signed_result_statement'],
                                              public_keys[replica_id]):
                continue

            if expected_hash == result_stmt['result_statement']['result_hash']:
                hash_match_count += 1

        if hash_match_count >= self._t + 1:
            return True
        else:
            return False
