import log_messages
from commons import Commons
from commons import ReplicaState

o_replica = import_da('replica')


# noinspection PyUnresolvedReferences
class Head(o_replica.Replica,process):
    def setup(replica_config, object=None):
        print('::::::::::::::::::::::::::::::::::::::::::::::::::::::::::')
        pass

        self._current_slot = 0
        self._pending_requests = set()

    def receive(msg=('request', message, client_id), from_=super._config['clients'].values()):
        if not Commons.is_valid_signature(message['signed_content'], super._config['public_keys'][client_id]):
            return

        request_key = (message['content']['operation']['id'], message['content']['operation']['client_id'])
        reply_cached_for_request = request_key in super._result_cache
        reply_pending_for_request = request_key in super._pending_requests
        if reply_cached_for_request:
            output(log_messages.RESULT_CACHED, client_id)
            result_shuttle = super._result_cache[request_key]
            super._send_result(result_shuttle)
        elif reply_pending_for_request:
            output(log_messages.RESULT_PENDING)
            if await(request_key not in super._pending_requests):
                output(log_messages.RESULT_SENT_AFTER_WAIT, client_id)
                result_shuttle = super._result_cache[request_key]
                super._send_result(result_shuttle)
            elif timeout(super._config['head_timeout']):
                pass  # todo send reconfig request
        else:
            shuttle = self._process_request(message)
            self._pending_requests.append(request_key)
            shuttle['signed_content'] = Commons.sign(shuttle['content'], super._config['private_key'])
            send(('shuttle', shuttle, super._id), to=super._config['next_replica'])

            if message['content']['is_retry']:
                if await(request_key not in super._pending_requests):
                    output(log_messages.RESULT_SENT_AFTER_WAIT, client_id)
                    result_shuttle = super._result_cache[request_key]
                    super._send_result(result_shuttle)
                elif timeout(super._config['head_timeout']):
                    pass  # todo send reconfig request


