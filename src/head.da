from src import log_messages
from src.commons import Commons
from src.replica import Direction
from src.replica import Replica


# noinspection PyUnresolvedReferences
class Head(Replica):

    def receive(msg=('request', message, pid), from_=self._clients):
        if not Commons.is_valid_signature(message, self._public_keys[from_["id"]]):
            return

        reply_cached_for_request = message["content"]["operation"]["id"] in self._processed_requests
        reply_pending_for_request = message["content"]["operation"]["id"] in self._pending_requests
        -- result
        if reply_cached_for_request:
            self._send_result_shuttle(message)
        elif reply_pending_for_request:
            result_message = self._pending_requests[message["content"]["operation"]["id"]]
            output(log_messages.RESULT_PENDING)
            if(await(received(('result', _), pid), at=(result,), from_=self._current_config['replicas'])):
                #  shouldnt we send result along to client?
                send(('result', result_message, self), to=from_)
                output(log_messages.RESULT_SENT_AFTER_WAIT, from_)
        else:
            self._process_request(message)

    def _process_request(message):
        if not Commons.is_valid_signature(message, self._public_keys[from_["id"]]):
            return

        # todo
        pass

    def _handle_update(update_message):
        slot = _get_slot()
        message = create_shuttle(updateMessage, slot)
        message["content"]["order_proof"] = update_order_proof(message)
        r = update_running_state(self.object, update_message["content"]["operation"])
        message["content"]["result_proof"] = update_result_proof(message["content"]["result_proof"], r)
        route(message, Direction.FORWARD)

    def _handle_read(message, to):
        reply_cached_for_request = message["content"]["operation"]["id"] in self._processed_requests
        if reply_cached_for_request:
            self._send_result_shuttle(message, to)

    def _send_result_shuttle(message, to):
        result_message = self._processed_requests[message["content"]["operation"]["id"]]
        output(log_messages.RESULT_CACHED)
        send(('result', result_message, self), to)
